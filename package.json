{
  "name": "coqpilot",
  "displayName": "Ð¡oqpilot",
  "description": "An ai based completion extension for Coq interactive prover.",
  "icon": "etc/img/logo.ico",
  "repository": {
    "type": "git",
    "url": "https://github.com/K-dizzled/coqpilot"
  },
  "publisher": "JetBrains-Research",
  "version": "1.5.3",
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:coq"
  ],
  "main": "./out/mainNode.js",
  "contributes": {
    "languages": [
      {
        "id": "coq",
        "aliases": [
          "Coq",
          "coq",
          "Gallina",
          "gallina"
        ],
        "extensions": [
          ".v"
        ]
      }
    ],
    "commands": [
      {
        "command": "coqpilot.perform_completion_under_cursor",
        "title": "Coqpilot: Try to generate proof for the goal under the cursor."
      },
      {
        "command": "coqpilot.perform_completion_for_all_admits",
        "title": "Coqpilot: Try to prove all holes (admitted goals) in the current file."
      },
      {
        "command": "coqpilot.perform_completion_in_selection",
        "title": "Coqpilot: Try to prove holes (admitted goals) in selection."
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "coqpilot.perform_completion_in_selection",
          "when": "editorTextFocus && editorHasSelection && resourceLangId == coq",
          "group": "queries"
        }
      ]
    },
    "configuration": [
      {
        "type": "object",
        "title": "CoqPilot",
        "properties": {
          "coqpilot.openAiModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "A prompt for the open-ai model.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "maxTokens": {
                  "type": "number",
                  "description": "How many tokens is allowed to be generated by the open-ai model.",
                  "default": 2000
                },
                "temperature": {
                  "type": "number",
                  "description": "The temperature of the open-ai model.",
                  "default": 1
                },
                "model": {
                  "type": "string",
                  "description": "The model to use from the open-ai platform.",
                  "default": "gpt-3.5-turbo-0301"
                },
                "apiKey": {
                  "type": "string",
                  "description": "An `open-ai` api key. Is used to communicate with the open-ai api. You can get one [here](https://platform.openai.com/account/api-keys).",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "How many proof attempts should be generated for one theorem.",
                  "default": 15
                }
              }
            },
            "default": [
              {
                "prompt": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'.",
                "maxTokens": 2000,
                "temperature": 1,
                "model": "gpt-3.5-turbo-0301",
                "apiKey": "None",
                "choices": 15
              }
            ],
            "markdownDescription": "A list of parameters for open-ai models. Each object represents a single model's configuration. Each model will be fetched for completion independently in the order they are listed."
          },
          "coqpilot.grazieModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "A prompt for the grazie model.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "model": {
                  "type": "string",
                  "description": "The model to use from the grazie platform.",
                  "default": "openai-gpt-4"
                },
                "apiKey": {
                  "type": "string",
                  "description": "`Grazie` api key. Now available for JetBrains employees only.",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "How many proof attempts should be generated for one theorem.",
                  "default": 15
                }
              }
            },
            "default": [],
            "markdownDescription": "Now only available in beta for JetBrains employees. A list of parameters for grazie models. Each object represents a single model's configuration. Each model will be fetched for completion independently in the order they are listed."
          },
          "coqpilot.predefinedProofsModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tactics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of tactics that would also be used to try generating proofs. Commands in the list must be valid coq commands available in your environment.",
                  "default": [
                    "auto."
                  ]
                }
              }
            },
            "default": [
              {
                "tactics": [
                  "auto."
                ]
              }
            ],
            "markdownDescription": "A list where each object represents a single model configuration. Here each model is configured with a set of predefined proofs, which coqpilot should try when searching for completion."
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint \"src/**/*.{ts,js}\" --ext .ts",
    "format": "prettier --write \"src/**/*.{ts,js}\" && eslint \"src/**/*.{ts,js}\" --ext .ts --fix",
    "pretest": "npm run compile && npm run lint",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/cli-progress": "^3.11.3",
    "@types/event-source-polyfill": "^1.0.5",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/vscode": "^1.82.0",
    "@types/yargs": "^17.0.24",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.3.2",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "prettier": "^3.2.5",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@codemirror/autocomplete": "^6.9.1",
    "ajv": "^8.12.0",
    "async-mutex": "^0.4.1",
    "axios": "^1.6.2",
    "cli-progress": "^3.12.0",
    "dedent": "^1.5.1",
    "event-source-polyfill": "^1.0.31",
    "i": "^0.3.7",
    "mocha-param": "^2.0.1",
    "npm": "^10.4.0",
    "openai": "^4.6.0",
    "path": "^0.12.7",
    "pino": "^8.15.1",
    "pino-pretty": "^10.2.0",
    "toml": "^3.0.0",
    "vscode-languageclient": "^9.0.1",
    "yargs": "^17.7.2"
  }
}
