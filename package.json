{
  "name": "coqpilot",
  "displayName": "Ð¡oqpilot",
  "description": "An ai based completion extension for Coq interactive prover.",
  "icon": "etc/img/logo.ico",
  "repository": {
    "type": "git",
    "url": "https://github.com/K-dizzled/coqpilot"
  },
  "publisher": "JetBrains-Research",
  "version": "2.2.0",
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:coq"
  ],
  "main": "./out/mainNode.js",
  "contributes": {
    "languages": [
      {
        "id": "coq",
        "aliases": [
          "Coq",
          "coq",
          "Gallina",
          "gallina"
        ],
        "extensions": [
          ".v"
        ]
      }
    ],
    "commands": [
      {
        "command": "coqpilot.perform_completion_under_cursor",
        "title": "Coqpilot: Try to generate proof for the goal under the cursor"
      },
      {
        "command": "coqpilot.perform_completion_for_all_admits",
        "title": "Coqpilot: Try to prove all holes (admitted goals) in the current file"
      },
      {
        "command": "coqpilot.perform_completion_in_selection",
        "title": "Coqpilot: Try to prove holes (admitted goals) in the selection"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "coqpilot.perform_completion_in_selection",
          "when": "editorTextFocus && editorHasSelection && resourceLangId == coq",
          "group": "queries"
        }
      ]
    },
    "configuration": [
      {
        "type": "object",
        "title": "CoqPilot",
        "properties": {
          "coqpilot.predefinedProofsModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelId": {
                  "type": "string",
                  "markdownDescription": "Unique identifier of this model to distinguish it from others. Could be any string.",
                  "default": "predefined-auto"
                },
                "tactics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of tactics to try to complete a hole with. Commands in the list must be valid Coq commands available in your environment.",
                  "default": [
                    "auto."
                  ]
                }
              }
            },
            "default": [
              {
                "modelId": "predefined-auto",
                "tactics": [
                  "auto."
                ]
              }
            ],
            "markdownDescription": "List of configurations with sets of predefined proofs. CoqPilot will check these proofs when searching for completion.",
            "order": 0
          },
          "coqpilot.openAiModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelId": {
                  "type": "string",
                  "markdownDescription": "Unique identifier of this model to distinguish it from others. Could be any string.",
                  "default": "openai-gpt-3.5"
                },
                "modelName": {
                  "type": "string",
                  "markdownDescription": "Model to use from the OpenAI platform: \n * gpt-4 \n * gpt-4-0314 \n * gpt-4-0613 \n * gpt-4-32k \n * gpt-4-32k-0314 \n * gpt-4-32k-0613 \n * gpt-3.5-turbo \n * gpt-3.5-turbo-16k \n * gpt-3.5-turbo-0301 \n * gpt-3.5-turbo-0613 \n * gpt-3.5-turbo-16k-0613",
                  "default": "gpt-3.5-turbo-0301"
                },
                "temperature": {
                  "type": "number",
                  "description": "Temperature of the OpenAI model.",
                  "default": 1
                },
                "apiKey": {
                  "type": "string",
                  "description": "Api key to communicate with the OpenAi api. You can get one [here](https://platform.openai.com/account/api-keys).",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "Number of attempts to generate proof for one hole with this model. All attempts are made as a single request, so this parameter should not have a significant impact on performance. However, more choices mean more tokens spent on generation.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "Prompt for the OpenAI model to begin chat with. It is sent as a system message, which means it has more impact than other messages.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "maxTokensToGenerate": {
                  "type": "number",
                  "description": "Number of tokens that the model is allowed to generate as a response message (i.e. message with proof).",
                  "default": 2048
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "Total length of input and generated tokens, it is determined by the model. For OpenAI models, tokens limits could be found [here](https://platform.openai.com/docs/models/).",
                  "default": 4096
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "Maximum number of rounds to generate and further fix the proof. Default value is 1, which means each proof will be only generated, but not fixed.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "Number of attempts to generate a proof fix for each proof in one round. Warning: increasing `proofFixChoices` can lead to exponential growth in generation requests if `maxRoundsNumber` is relatively large.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "Prompt for the proof-fix request that will be sent as a user chat message in response to an incorrect proof. It may include the `${diagnostic}` substring, which will be replaced by the actual compiler diagnostic.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                  }
                }
              }
            },
            "default": [
              {
                "modelId": "openai-gpt-3.5",
                "modelName": "gpt-3.5-turbo-0301",
                "temperature": 1,
                "apiKey": "None",
                "choices": 15,
                "systemPrompt": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'.",
                "maxTokensToGenerate": 2048,
                "tokensLimit": 4096,
                "multiroundProfile": {
                  "maxRoundsNumber": 1,
                  "proofFixChoices": 1,
                  "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                }
              }
            ],
            "markdownDescription": "List of configurations for OpenAI models. Each configuration will be fetched for completions independently in the order they are listed.",
            "order": 1
          },
          "coqpilot.grazieModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelId": {
                  "type": "string",
                  "markdownDescription": "Unique identifier of this model to distinguish it from others. Could be any string.",
                  "default": "openai-gpt-3.5"
                },
                "modelName": {
                  "type": "string",
                  "markdownDescription": "Model to use from the Grazie platform: \n * openai-gpt-4 \n * openai-chat-gpt \n * grazie-chat-llama-v2-7b \n * grazie-chat-llama-v2-13b \n * grazie-chat-zephyr-7b \n * qwen-turbo \n * qwen-plus",
                  "default": "openai-gpt-4"
                },
                "apiKey": {
                  "type": "string",
                  "description": "Api key to communicate with the Grazie api. Now available for JetBrains employees only.",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "Number of attempts to generate proof for one hole with this model.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "Prompt for the Grazie model to begin chat with. It is sent as a system message, which means it has more impact than other messages.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "maxTokensToGenerate": {
                  "type": "number",
                  "description": "Number of tokens that the model is allowed to generate as a response message (i.e. message with proof).",
                  "default": 1024
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "Total length of input and generated tokens, it is determined by the model. For OpenAI models, tokens limits could be found [here](https://platform.openai.com/docs/models/).",
                  "default": 4096
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "Maximum number of rounds to generate and further fix the proof. Default value is 1, which means each proof will be only generated, but not fixed.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "Number of attempts to generate a proof fix for each proof in one round. Warning: increasing `proofFixChoices` can lead to exponential growth in generation requests if `maxRoundsNumber` is relatively large.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "Prompt for the proof-fix request that will be sent as a user chat message in response to an incorrect proof. It may include the `${diagnostic}` substring, which will be replaced by the actual compiler diagnostic.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                  }
                }
              }
            },
            "default": [
            ],
            "markdownDescription": "Now available in beta for JetBrains employees only. List of configurations for Grazie models. Each configuration will be fetched for completions independently in the order they are listed.",
            "order": 2
          },
          "coqpilot.lmStudioModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelId": {
                  "type": "string",
                  "markdownDescription": "Unique identifier of this model to distinguish it from others. Could be any string.",
                  "default": "lm-studio"
                },
                "temperature": {
                  "type": "number",
                  "description": "Temperature of the LM Studio model.",
                  "default": 1
                },
                "port": {
                  "type": "number",
                  "description": "Port on which LM Studio is launched.",
                  "default": 1234
                },
                "choices": {
                  "type": "number",
                  "description": "Number of attempts to generate proof for one hole with this model.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "Prompt for the LM Studio model to begin chat with. It is sent as a system message, which means it has more impact than other messages.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "maxTokensToGenerate": {
                  "type": "number",
                  "description": "Number of tokens that the model is allowed to generate as a response message (i.e. message with proof).",
                  "default": 1024
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "Total length of input and generated tokens, usually it is determined by the model.",
                  "default": 2048
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "Maximum number of rounds to generate and further fix the proof. Default value is 1, which means each proof will be only generated, but not fixed.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "Number of attempts to generate a proof fix for each proof in one round. Warning: increasing `proofFixChoices` can lead to exponential growth in generation requests if `maxRoundsNumber` is relatively large.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "Prompt for the proof-fix request that will be sent as a user chat message in response to an incorrect proof. It may include the `${diagnostic}` substring, which will be replaced by the actual compiler diagnostic.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: `${diagnostic}`. Please, fix the proof."
                  }
                }
              }
            },
            "default": [],
            "markdownDescription": "List of configurations that fetch completions from a locally running LLM inside [LM Studio](https://lmstudio.ai).",
            "order": 3
          },
          "coqpilot.contextTheoremsRankerType": {
            "type": "string",
            "enum": [
              "distance",
              "random"
            ],
            "markdownEnumDescriptions": [
              "Theorems are selected based on the distance to the current cursor position.",
              "Theorems are selected randomly."
            ],
            "description": "Context of the LLM is limited. Usually not all theorems from the file may be used in the completion request. This parameter defines the way theorems are selected for the completion.",
            "default": "distance",
            "order": 4
          },
          "coqpilot.loggingVerbosity": {
            "type": "string",
            "enum": [
              "info",
              "debug"
            ],
            "markdownEnumDescriptions": [
              "Only important information is logged.",
              "All information is logged."
            ],
            "description": "The verbosity of the logs.",
            "default": "info",
            "order": 5
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint \"src/**/*.{ts,js}\" --ext .ts",
    "format": "prettier --write \"src/**/*.{ts,js}\" && eslint \"src/**/*.{ts,js}\" --ext .ts --fix",
    "pretest": "npm run compile && npm run lint",
    "test": "node ./out/test/runTest.js",
    "clean": "rm -rf out",
    "rebuild-test-resources": "cd ./src/test/resources/coqProj && make clean && make",
    "preclean-test": "npm run clean && npm run rebuild-test-resources && npm run compile && npm run lint",
    "clean-test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@trivago/prettier-plugin-sort-imports": "^4.3.0",
    "@types/cli-progress": "^3.11.3",
    "@types/event-source-polyfill": "^1.0.5",
    "@types/expect.js": "^0.3.32",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/tmp": "^0.2.6",
    "@types/vscode": "^1.82.0",
    "@types/yargs": "^17.0.24",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.3.2",
    "earl": "^1.1.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "prettier": "^3.2.5",
    "tmp": "^0.2.3",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@codemirror/autocomplete": "^6.9.1",
    "ajv": "^8.12.0",
    "async-mutex": "^0.4.1",
    "axios": "^1.6.2",
    "cli-progress": "^3.12.0",
    "dedent": "^1.5.1",
    "event-source-polyfill": "^1.0.31",
    "i": "^0.3.7",
    "mocha-param": "^2.0.1",
    "npm": "^10.4.0",
    "openai": "^4.6.0",
    "path": "^0.12.7",
    "pino": "^8.15.1",
    "pino-pretty": "^10.2.0",
    "tiktoken": "^1.0.13",
    "toml": "^3.0.0",
    "vscode-languageclient": "^9.0.1",
    "yargs": "^17.7.2"
  }
}
