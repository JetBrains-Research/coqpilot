{
  "name": "coqpilot",
  "displayName": "Ð¡oqpilot",
  "description": "An ai based completion extension for Coq interactive prover.",
  "icon": "etc/img/logo.ico",
  "repository": {
    "type": "git",
    "url": "https://github.com/K-dizzled/coqpilot"
  },
  "publisher": "JetBrains-Research",
  "version": "1.9.0",
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:coq"
  ],
  "main": "./out/mainNode.js",
  "contributes": {
    "languages": [
      {
        "id": "coq",
        "aliases": [
          "Coq",
          "coq",
          "Gallina",
          "gallina"
        ],
        "extensions": [
          ".v"
        ]
      }
    ],
    "commands": [
      {
        "command": "coqpilot.perform_completion_under_cursor",
        "title": "Coqpilot: Try to generate proof for the goal under the cursor."
      },
      {
        "command": "coqpilot.perform_completion_for_all_admits",
        "title": "Coqpilot: Try to prove all holes (admitted goals) in the current file."
      },
      {
        "command": "coqpilot.perform_completion_in_selection",
        "title": "Coqpilot: Try to prove holes (admitted goals) in selection."
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "coqpilot.perform_completion_in_selection",
          "when": "editorTextFocus && editorHasSelection && resourceLangId == coq",
          "group": "queries"
        }
      ]
    },
    "configuration": [
      {
        "type": "object",
        "title": "CoqPilot",
        "properties": {
          "coqpilot.openAiModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelName": {
                  "type": "string",
                  "markdownDescription": "The model to use from the open-ai platform: \n * gpt-4 \n * gpt-4-0314 \n * gpt-4-0613 \n * gpt-4-32k \n * gpt-4-32k-0314 \n * gpt-4-32k-0613 \n * gpt-3.5-turbo \n * gpt-3.5-turbo-16k \n * gpt-3.5-turbo-0301 \n * gpt-3.5-turbo-0613 \n * gpt-3.5-turbo-16k-0613",
                  "default": "gpt-3.5-turbo-0301"
                },
                "temperature": {
                  "type": "number",
                  "description": "The temperature of the open-ai model.",
                  "default": 1
                },
                "apiKey": {
                  "type": "string",
                  "description": "An `open-ai` api key. Is used to communicate with the open-ai api. You can get one [here](https://platform.openai.com/account/api-keys).",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "How many proof attempts should be generated for one theorem.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "A prompt for the open-ai model.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "newMessageMaxTokens": {
                  "type": "number",
                  "description": "How many tokens is allowed to be generated by the model.",
                  "default": 2000
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "The total length of input tokens and generated tokens. Is determined by the model. For open-ai models could be found [here](https://platform.openai.com/docs/models/).",
                  "default": 4096
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "The maximum number of rounds for the multiround completion.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "How many proof fixes should be generated for one proof.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "A prompt for the fix request message.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                  }
                }
              }
            },
            "default": [
              {
                "temperature": 1,
                "apiKey": "None",
                "modelName": "gpt-3.5-turbo-0301",
                "choices": 15,
                "systemPrompt": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'.",
                "newMessageMaxTokens": 2000,
                "tokensLimit": 4096,
                "multiroundProfile": {
                  "maxRoundsNumber": 1,
                  "proofFixChoices": 1,
                  "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                }
              }
            ],
            "markdownDescription": "A list of parameters for open-ai models. Each object represents a single model's configuration. Each model will be fetched for completion independently in the order they are listed."
          },
          "coqpilot.grazieModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelName": {
                  "type": "string",
                  "markdownDescription": "The model to use from the grazie platform: \n * openai-gpt-4 \n * openai-chat-gpt \n * grazie-chat-llama-v2-7b \n * grazie-chat-llama-v2-13b \n * grazie-chat-zephyr-7b \n * qwen-turbo \n * qwen-plus",
                  "default": "openai-gpt-4"
                },
                "apiKey": {
                  "type": "string",
                  "description": "`Grazie` api key. Now available for JetBrains employees only.",
                  "default": "None"
                },
                "choices": {
                  "type": "number",
                  "description": "How many proof attempts should be generated for one theorem.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "A prompt for the grazie model.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "newMessageMaxTokens": {
                  "type": "number",
                  "description": "How many tokens is allowed to be generated by the model.",
                  "default": 2000
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "The total length of input tokens and generated tokens. Is determined by the model. For open-ai models could be found [here](https://platform.openai.com/docs/models/).",
                  "default": 4096
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "The maximum number of rounds for the multiround completion.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "How many proof fixes should be generated for one proof.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "A prompt for the fix request message.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                  }
                }
              }
            },
            "default": [],
            "markdownDescription": "Now only available in beta for JetBrains employees. A list of parameters for grazie models. Each object represents a single model's configuration. Each model will be fetched for completion independently in the order they are listed."
          },
          "coqpilot.predefinedProofsModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelName": {
                  "type": "string",
                  "markdownDescription": "Doesn't make any change. Just an identifier for the model.",
                  "default": "das-auto-proofs"
                },
                "tactics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of tactics that would also be used to try generating proofs. Commands in the list must be valid coq commands available in your environment.",
                  "default": [
                    "auto."
                  ]
                }
              }
            },
            "default": [
              {
                "modelName": "das-auto-proofs",
                "tactics": [
                  "auto."
                ]
              }
            ],
            "markdownDescription": "A list where each object represents a single model configuration. Here each model is configured with a set of predefined proofs, which coqpilot should try when searching for completion."
          },
          "coqpilot.lmStudioModelsParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modelName": {
                  "type": "string",
                  "markdownDescription": "Doesn't make any change. Just an identifier for the model.",
                  "default": "lm-studio"
                },
                "temperature": {
                  "type": "number",
                  "description": "The temperature of the model.",
                  "default": 1
                },
                "port": {
                  "type": "number",
                  "description": "A port on which you have launched the LM studio.",
                  "default": 1234
                },
                "choices": {
                  "type": "number",
                  "description": "How many proof attempts should be generated for one theorem.",
                  "default": 15
                },
                "systemPrompt": {
                  "type": "string",
                  "description": "A prompt for the lm-studio model.",
                  "default": "Generate proof of the theorem from user input in Coq. You should only generate proofs in Coq. Never add special comments to the proof. Your answer should be a valid Coq proof. It should start with 'Proof.' and end with 'Qed.'."
                },
                "newMessageMaxTokens": {
                  "type": "number",
                  "description": "How many tokens is allowed to be generated by the model.",
                  "default": 2000
                },
                "tokensLimit": {
                  "type": "number",
                  "description": "The total length of input tokens and generated tokens. Is determined by the model. For open-ai models could be found [here](https://platform.openai.com/docs/models/).",
                  "default": 2048
                },
                "multiroundProfile": {
                  "type": "object",
                  "properties": {
                    "maxRoundsNumber": {
                      "type": "number",
                      "description": "The maximum number of rounds for the multiround completion.",
                      "default": 1
                    },
                    "proofFixChoices": {
                      "type": "number",
                      "description": "How many proof fixes should be generated for one proof.",
                      "default": 1
                    },
                    "proofFixPrompt": {
                      "type": "string",
                      "description": "A prompt for the fix request message.",
                      "default": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                    }
                  },
                  "default": {
                    "maxRoundsNumber": 1,
                    "proofFixChoices": 1,
                    "proofFixPrompt": "Unfortunately, the last proof is not correct. Here is the compiler's feedback: '${diagnostic}'. Please, fix the proof."
                  }
                }
              }
            },
            "default": [],
            "markdownDescription": "Configuration of models which fetch completions from locally running LLM inside the [LM studio](https://lmstudio.ai)."
          },
          "coqpilot.contextTheoremsRankerType": {
            "type": "string",
            "enum": [
              "distance",
              "random"
            ],
            "markdownEnumDescriptions": [
              "Theorems are selected based on the distance to the current cursor position.",
              "Theorems are selected randomly."
            ],
            "description": "Context of the LLM is limited. Usually not all theorems from the file may be used in the completion request. This parameter defines the way theorems are selected for the completion.",
            "default": "distance"
          },
          "coqpilot.loggingVerbosity": {
            "type": "string",
            "enum": [
              "info",
              "debug"
            ],
            "markdownEnumDescriptions": [
              "Only important information is logged.",
              "All information is logged."
            ],
            "description": "The verbosity of the logs.",
            "default": "info"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint \"src/**/*.{ts,js}\" --ext .ts",
    "format": "prettier --write \"src/**/*.{ts,js}\" && eslint \"src/**/*.{ts,js}\" --ext .ts --fix",
    "pretest": "npm run compile && npm run lint",
    "test": "node ./out/test/runTest.js",
    "test-ci": "npm test -- -g=\"--non-ci\" -i=true",
    "clean": "rm -rf out"
  },
  "devDependencies": {
    "@trivago/prettier-plugin-sort-imports": "^4.3.0",
    "@types/cli-progress": "^3.11.3",
    "@types/event-source-polyfill": "^1.0.5",
    "@types/expect.js": "^0.3.32",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/vscode": "^1.82.0",
    "@types/yargs": "^17.0.24",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.3.2",
    "earl": "^1.1.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "prettier": "^3.2.5",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@codemirror/autocomplete": "^6.9.1",
    "ajv": "^8.12.0",
    "async-mutex": "^0.4.1",
    "axios": "^1.6.2",
    "cli-progress": "^3.12.0",
    "dedent": "^1.5.1",
    "event-source-polyfill": "^1.0.31",
    "i": "^0.3.7",
    "mocha-param": "^2.0.1",
    "npm": "^10.4.0",
    "openai": "^4.6.0",
    "path": "^0.12.7",
    "pino": "^8.15.1",
    "pino-pretty": "^10.2.0",
    "tiktoken": "^1.0.13",
    "toml": "^3.0.0",
    "vscode-languageclient": "^9.0.1",
    "yargs": "^17.7.2"
  }
}
