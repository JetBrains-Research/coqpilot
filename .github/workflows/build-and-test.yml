name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'v[0-9]+.[0-9]+.[0-9]+-dev'
  workflow_dispatch:
  workflow_call:
    outputs:
      vsixPath:
        description: "The path to the packaged and published VSIX file."
        value: ${{ jobs.upload-artifacts.outputs.vsixPath }}

env: 
  coqlsp-path: "coq-lsp"
  coqlsp-version: "0.1.8+8.19"

jobs:
  create-matrix:
    name: Create a configuration matrix for the following jobs
    strategy:
      matrix:
        os: [ubuntu-latest]
        ocaml-compiler: [4.14]

    runs-on: ${{ matrix.os }}

    outputs:
      os: ${{ matrix.os }}
      ocaml-compiler: ${{ matrix.ocaml-compiler }}

  build: 
    needs: create-matrix
    strategy:
      matrix:
        os: [needs.create-matrix.outputs.os]
        ocaml-compiler: [needs.create-matrix.outputs.ocaml-compiler]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout tree
      uses: actions/checkout@v4
    
    # For some reason, the most significant thing for caching opam dependencies properly
    # is `dune-cache: true` instead of this caching action.
    - name: Restore cached opam dependencies
      id: cache-opam
      uses: actions/cache@v3
      with:
        path: ~/.opam/
        key: opam-${{ matrix.os }}-${{ matrix.ocaml-compiler }}-${{ env.coqlsp-version }}
        restore-keys: opam-${{ matrix.os }}-${{ matrix.ocaml-compiler }}-

    - name: Set-up OCaml ${{ matrix.ocaml-compiler }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: ${{ matrix.ocaml-compiler }}
        dune-cache: true

    - name: Install opam dependencies
      env:
          OPAMYES: true
      run: |
        opam install coq-lsp.0.1.8+8.19
        eval $(opam env)

    - name: Install Node.js
      uses: actions/setup-node@v4 
      with:
        node-version-file: ".nvmrc"
    - run: npm ci

    - name: Check coq-lsp version
      env:
          OPAMYES: true
      run: |
        opam list coq-lsp
        eval $(opam env)
        which coq-lsp
      
    - name: Check if coq-lsp is in PATH 
      run: |
        eval $(opam env)
        if ! command -v coq-lsp &> /dev/null
        then
            echo "coq-lsp could not be found"
        fi
        echo "coqlsppath=`which coq-lsp`" >> $GITHUB_ENV
      shell: bash

  test:
    needs: [create-matrix, build]
    strategy:
      matrix:
        os: [needs.create-matrix.outputs.os]
        ocaml-compiler: [needs.create-matrix.outputs.ocaml-compiler]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Test on Linux
        if: runner.os == 'Linux'
        env:
            COQ_LSP_PATH: ${{ env.coqlsp-path }}
        run: |
          eval $(opam env)
          xvfb-run -a npm run clean-test

      - name: Test not on Linux
        if: runner.os != 'Linux'
        env:
            COQ_LSP_PATH: ${{ env.coqlsp-path }}
        run: |
          eval $(opam env)
          npm run clean-test
  
  setup-ci-debug-session:
    name: Start a CI debug session if build or test fail

    needs: [create-matrix, build]
    strategy:
      matrix:
        os: [needs.create-matrix.outputs.os]
        ocaml-compiler: [needs.create-matrix.outputs.ocaml-compiler]

    runs-on: ${{ matrix.os }}

    if: always()
    steps:
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
    
  upload-artifacts:
    name: Build and upload extension package

    needs: test
    runs-on: ubuntu-latest

    outputs:
      vsixPath: ${{ steps.package-extension.outputs.vsixPath }}
    
    steps:
      - name: Package Extension
        id: package-extension
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: stub
          dryRun: true

      - name: Upload Extension Package as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-latest
          path: ${{ steps.package-extension.outputs.vsixPath }}
